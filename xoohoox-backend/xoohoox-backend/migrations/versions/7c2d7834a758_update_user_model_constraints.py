"""update user model constraints

Revision ID: 7c2d7834a758
Revises: 29767bc16047
Create Date: 2025-04-11 21:28:35.231898

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7c2d7834a758'
down_revision: Union[str, None] = '29767bc16047'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop foreign key constraints first
    op.drop_constraint('quality_control_juicing_input_id_fkey', 'quality_control', type_='foreignkey')
    op.drop_constraint('quality_control_tester_id_fkey', 'quality_control', type_='foreignkey')
    op.drop_constraint('quality_control_batch_id_fkey', 'quality_control', type_='foreignkey')
    op.drop_constraint('maintenance_log_maintenance_id_fkey', 'maintenance_log', type_='foreignkey')
    
    # Now drop tables in correct order
    op.drop_index('ix_juicing_input_log_id', table_name='juicing_input_log')
    op.drop_index('ix_juicing_input_log_log_id', table_name='juicing_input_log')
    op.drop_table('juicing_input_log')
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_id', table_name='users')
    op.drop_index('ix_users_username', table_name='users')
    op.drop_table('users')
    op.drop_index('ix_inventory_management_id', table_name='inventory_management')
    op.drop_index('ix_inventory_management_item_id', table_name='inventory_management')
    op.drop_table('inventory_management')
    op.drop_index('ix_equipment_maintenance_id', table_name='equipment_maintenance')
    op.drop_table('equipment_maintenance')
    op.drop_index('ix_batch_tracking_batch_id', table_name='batch_tracking')
    op.drop_index('ix_batch_tracking_id', table_name='batch_tracking')
    op.drop_table('batch_tracking')
    op.drop_index('ix_quality_control_id', table_name='quality_control')
    op.drop_index('ix_quality_control_test_id', table_name='quality_control')
    op.drop_table('quality_control')
    op.drop_index('ix_maintenance_log_id', table_name='maintenance_log')
    op.drop_table('maintenance_log')

    # Create tables in correct order
    op.create_table('users',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('created_by', sa.String(), nullable=True),
        sa.Column('updated_by', sa.String(), nullable=True),
        sa.Column('username', sa.String(), nullable=False),
        sa.Column('email', sa.String(), nullable=False),
        sa.Column('hashed_password', sa.String(), nullable=False),
        sa.Column('full_name', sa.String(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('is_superuser', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_users_email', 'users', ['email'], unique=False)
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_index('ix_users_username', 'users', ['username'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('maintenance_log',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('maintenance_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('log_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('log_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('performed_by', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('notes', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['maintenance_id'], ['equipment_maintenance.id'], name='maintenance_log_maintenance_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='maintenance_log_pkey')
    )
    op.create_index('ix_maintenance_log_id', 'maintenance_log', ['id'], unique=False)
    op.create_table('quality_control',
    sa.Column('test_id', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('batch_id', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('test_type', postgresql.ENUM('MICROBIAL', 'CHEMICAL', 'PHYSICAL', 'SENSORY', 'OTHER', name='testtype'), autoincrement=False, nullable=False),
    sa.Column('test_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('test_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('test_method', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('test_parameters', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('expected_range_min', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('expected_range_max', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('actual_value', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('unit_of_measure', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('result', postgresql.ENUM('PASS', 'FAIL', 'PENDING', 'INCONCLUSIVE', name='testresult'), autoincrement=False, nullable=False),
    sa.Column('tester_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('equipment_used', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('temperature_c', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('humidity_percent', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('corrective_actions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('retest_required', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('juicing_input_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['batch_id'], ['batch_tracking.batch_id'], name='quality_control_batch_id_fkey'),
    sa.ForeignKeyConstraint(['juicing_input_id'], ['juicing_input_log.id'], name='quality_control_juicing_input_id_fkey'),
    sa.ForeignKeyConstraint(['tester_id'], ['users.id'], name='quality_control_tester_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='quality_control_pkey')
    )
    op.create_index('ix_quality_control_test_id', 'quality_control', ['test_id'], unique=False)
    op.create_index('ix_quality_control_id', 'quality_control', ['id'], unique=False)
    op.create_table('batch_tracking',
    sa.Column('batch_id', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('quality_grade', postgresql.ENUM('A', 'B', 'C', 'REJECTED', name='qualitygrade'), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('RECEIVED', 'IN_STORAGE', 'IN_PROCESSING', 'COMPLETED', 'REJECTED', name='batchstatus'), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('batch_tracking_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('juice_type', postgresql.ENUM('ORANGE', 'APPLE', 'GRAPE', 'PINEAPPLE', 'MANGO', 'MIXED', 'OTHER', name='juicetype'), autoincrement=False, nullable=False),
    sa.Column('target_quantity', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('actual_quantity', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('production_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('completion_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('recipe_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('ingredients', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('actual_ingredients', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('temperature', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ph_level', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('brix', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('processing_time', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('quality_checks', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('issues', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('corrective_actions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='batch_tracking_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_batch_tracking_id', 'batch_tracking', ['id'], unique=False)
    op.create_index('ix_batch_tracking_batch_id', 'batch_tracking', ['batch_id'], unique=False)
    op.create_table('equipment_maintenance',
    sa.Column('equipment_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('equipment_type', postgresql.ENUM('JUICER', 'PASTEURIZER', 'FILTER', 'PUMP', 'TANK', 'SENSOR', 'OTHER', name='equipmenttype'), autoincrement=False, nullable=False),
    sa.Column('equipment_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('manufacturer', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('model_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('serial_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('installation_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('maintenance_type', postgresql.ENUM('PREVENTIVE', 'CORRECTIVE', 'CALIBRATION', 'INSPECTION', 'CLEANING', name='maintenancetype'), autoincrement=False, nullable=False),
    sa.Column('maintenance_status', postgresql.ENUM('SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'DELAYED', 'CANCELLED', name='maintenancestatus'), autoincrement=False, nullable=False),
    sa.Column('scheduled_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('actual_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('technician_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('cost', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('parts_replaced', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('work_performed', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('results', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('next_maintenance_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('requires_shutdown', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('shutdown_duration_hours', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_critical', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('maintenance_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('technician', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='equipment_maintenance_pkey')
    )
    op.create_index('ix_equipment_maintenance_id', 'equipment_maintenance', ['id'], unique=False)
    op.create_table('inventory_management',
    sa.Column('item_id', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('item_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('item_type', postgresql.ENUM('RAW_MATERIAL', 'PACKAGING', 'FINISHED_PRODUCT', 'CLEANING_SUPPLY', 'SPARE_PART', 'OTHER', name='itemtype'), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sku', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('barcode', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('unit_of_measure', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('quantity_in_stock', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('minimum_stock_level', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('reorder_point', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('maximum_stock_level', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('storage_location', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('storage_condition', postgresql.ENUM('AMBIENT', 'REFRIGERATED', 'FROZEN', 'CONTROLLED', name='storagecondition'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('IN_STOCK', 'LOW_STOCK', 'OUT_OF_STOCK', 'EXPIRED', 'RESERVED', 'DISCONTINUED', name='inventorystatus'), autoincrement=False, nullable=False),
    sa.Column('supplier_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('supplier_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('unit_cost', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('last_ordered_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_received_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expiry_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('lot_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('total_received', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('total_issued', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('total_adjusted', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('last_count_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_count_quantity', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='inventory_management_pkey'),
    sa.UniqueConstraint('barcode', name='inventory_management_barcode_key'),
    sa.UniqueConstraint('sku', name='inventory_management_sku_key')
    )
    op.create_index('ix_inventory_management_item_id', 'inventory_management', ['item_id'], unique=False)
    op.create_index('ix_inventory_management_id', 'inventory_management', ['id'], unique=False)
    op.create_table('juicing_input_log',
    sa.Column('log_id', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('batch_id', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('operator_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('equipment_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('input_quantity_kg', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('temperature_c', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('pressure_bar', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('duration_minutes', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('output_quantity_l', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('brix_reading', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('ph_level', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('turbidity_ntu', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('process_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('quality_issues', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('process_status', postgresql.ENUM('STARTED', 'IN_PROGRESS', 'COMPLETED', 'FAILED', name='processstatus'), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['batch_id'], ['batch_tracking.batch_id'], name='juicing_input_log_batch_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='juicing_input_log_pkey')
    )
    op.create_index('ix_juicing_input_log_log_id', 'juicing_input_log', ['log_id'], unique=False)
    op.create_index('ix_juicing_input_log_id', 'juicing_input_log', ['id'], unique=False)
    # ### end Alembic commands ###
